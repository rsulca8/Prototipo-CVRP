<?php
/**
 * Config.php
 * 08-Nov-2011
 *
 * PHP Version 5
 *
 * @category Services
 * @package  Services_OpenStreetMap
 * @author   Ken Guest <kguest@php.net>
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @version  Release: @package_version@
 * @link     Config.php
 */

/**
 * Services_OpenStreetMap_Config
 *
 * @category Services
 * @package  Services_OpenStreetMap
 * @author   Ken Guest <kguest@php.net>
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link     Config.php
 */
class Services_OpenStreetMap_Config
{
    protected $oauth_consumer_key = null;
    protected $oauth_token = null;
    protected $oauth_token_secret = null;
    protected $consumer_secret = null;

    protected $api = null;

    /**
     * Transport object.
     *
     * @var Services_OpenStreetMap_Transport
     */
    protected $transport = null;

    /**
     * Minimum version of the OSM API that is supported.
     *
     * @var float
     *
     * @internal
     */
    protected $minVersion = null;

    /**
     * Maximum version of the OSM API that is supported.
     *
     * @var float
     *
     * @internal
     */
    protected $maxVersion = null;

    /**
     * Timeout, in seconds.
     *
     * @var integer
     *
     * @internal
     */
    protected $timeout = null;

    /**
     * Number of elements allowed per changeset
     *
     * @var integer
     *
     * @internal
     */
    protected $changesetMaximumElements = null;

    /**
     * Maximum number of nodes per way.
     *
     * @var integer
     *
     * @internal
     */
    protected $waynodesMaximum = null;

    /**
     * Number of tracepoints per way.
     *
     * @var integer
     *
     * @internal
     */
    protected $tracepointsPerPage = null;

    /**
     * Max size of area that can be downloaded in one request.
     *
     * @var float
     *
     * @internal
     */
    protected $areaMaximum = null;

    /**
     * Max size of area in relation to notes
     *
     * @var mixed
     */
    protected $noteAreaMaximum = null;

    /**
     * Status of Database server: online, readonly or offline.
     *
     * @var string
     *
     * @internal
     */
    protected $databaseStatus = null;

    /**
     * Status of API server: online, readonly or offline.
     *
     * @var string
     *
     * @internal
     */
    protected $apiStatus = null;

    /**
     * Status of GPX server: online, readonly or offline.
     *
     * @var string
     *
     * @internal
     */
    protected $gpxStatus = null;

    /**
     * Default config settings
     *
     * @var array
     * @see Services_OpenStreetMap::getConfig
     * @see Services_OpenStreetMap::setConfig
     */
    protected $config = [
        'accept-language' => 'en',
        'adapter'         => 'HTTP_Request2_Adapter_Socket',
        'api_version'     => '0.6',
        'password'        => null,
        'passwordfile'    => null,
        'server'          => 'https://api.openstreetmap.org/',
        'User-Agent'      => 'Services_OpenStreetMap',
        'user'            => null,
        'verbose'         => false,
        /* Fields for OAuth auth */
        'oauth_token'     => false,
        'oauth_token_secret' => false,
        'oauth_consumer_key' => false,
        'consumer_secret' => false,
        /* SSL Config - prompted by Erkin Sergey <bacbone@mail.ru> with thanks */
        /* https://github.com/pear/Services_Openstreetmap/issues/32            */
        /* http://pear.php.net/manual/en/package.http.http-request2.config.php */
        'ssl_verify_peer' => true,
        'ssl_verify_host' => true,
        'ssl_cafile' => null,
        'ssl_local_cert' => null,
        'ssl_passphrase' => null,
    ];

    /**
     * Version of the [OSM] API which communications will be over.
     *
     * @var string
     *
     * @internal
     */
    protected $api_version = '0.6';

    /**
     * Server to connect to.
     *
     * @var string
     *
     * @internal
     */
    protected $server = 'https://api.openstreetmap.org/';

    /**
     * Capabilities XML generated by...
     *
     * @var string
     *
     * @internal
     */
    protected $generator = 'Generator';

    /**
     * Get the value of a configuration setting - if none is set all are
     * returned.
     *
     * Use like:
     * <code>
     * $config = $osm->getConfig();
     * </code>
     *
     * @param string $name name. optional.
     *
     * @return mixed  value of $name parameter, array of all configuration
     *                parameters if $name is not given
     * @throws Services_OpenStreetMap_InvalidArgumentException If the parameter
     *                                                         is unknown
     */
    public function getValue(string $name = null)
    {
        if ($name === null) {
            return $this->config;
        }
        $validator = new Services_OpenStreetMap_Validator_ConfigValue();
        $validator->validate($name, $this->config);
        return $this->config[$name];
    }

    /**
     * Set at least one configuration variable.
     *
     * Use like:
     * <code>
     * $osm->setConfig('user', 'fred@example.com');
     * $osm->setConfig(array('user' => 'fred@example.com', 'password' => 'Simples'));
     * $osm->setConfig('user' => 'f@example.com')->setConfig('password' => 'Sis');
     * </code>
     *
     * The following parameters are available:
     * <ul>
     *  <li> 'accept-language'    - language to use for queries with Nominatim</li>
     *  <li> 'adapter'            - adapter to use (string)</li>
     *  <li> 'api_version'        - Version of API to communicate via (string)</li>
     *  <li> 'password'           - password (string, optional)</li>
     *  <li> 'passwordfile'       - passwordfile (string, optional)</li>
     *  <li> 'server'             - server to connect to (string)</li>
     *  <li> 'User-Agent'         - User-Agent (string)</li>
     *  <li> 'user'               - user (string, optional)</li>
     *  <li> 'verbose'            - verbose (boolean, optional)</li>
     *  <li> 'oauth_token'        - false</li>
     *  <li> 'oauth_token_secret' - false</li>
     *  <li> 'oauth_consumer_key' - false</li>
     *  <li> 'consumer_secret'    - false</li>
     *  <li> 'ssl_verify_peer'    - true</li>
     *  <li> 'ssl_verify_host'    - true</li>
     *  <li> 'ssl_cafile'         - null</li>
     *  <li> 'ssl_local_cert'     - null</li>
     *  <li> 'ssl_passphrase'     - null</li>
     * </ul>
     * SSL related parameters are documented at
     * http://pear.php.net/manual/en/package.http.http-request2.config.php
     *
     * @param mixed $config array containing config settings
     * @param mixed $value  config value if $config is not an array
     *
     * @throws Services_OpenStreetMap_InvalidArgumentException If the parameter
     *                                                         is unknown
     *
     * @return Services_OpenStreetMap_Config
     */
    public function setValue($config, $value = null): Services_OpenStreetMap_Config
    {
        $validator = new Services_OpenStreetMap_Validator_ConfigValue();
        if (is_array($config)) {
            if (isset($config['adapter'])) {
                $this->config['adapter'] = $config['adapter'];
            }
            $refreshServerSettings = 0;

            foreach ($config as $key => $value) {
                $validator->validate($key, $this->config);
                switch ($key) {
                case 'passwordfile':
                    if ($value !== null) {
                        $this->setPasswordfile($value);
                    }
                    break;
                case 'api_version':
                    $this->config[$key] = $value;
                    $api = "Services_OpenStreetMap_API_V" . str_replace(
                        '.',
                        '',
                        $value
                    );
                    $this->api = new $api();
                    break;
                case 'accept_language':
                    $this->setAcceptLanguage($value);
                    break;
                case 'oauth_token':
                case 'oauth_token_secret':
                case 'oauth_consumer_key':
                case 'consumer_secret':
                case 'ssl_verify_peer':
                case 'ssl_verify_host':
                case 'ssl_cafile':
                case 'ssl_local_cert':
                case 'ssl_passphrase':
                    /* fallthru critera should refresh server settings */
                    $refreshServerSettings = 1;
                default:
                    $this->config[$key] = $value;
                }
            }
            if (isset($config['server'])) {
                $this->setServer($config['server']);
            } elseif ($refreshServerSettings) {
                $this->setServer($this->config['server']);
            }
        } else {
            $validator->validate($config, $this->config);
            $this->config[$config] = $value;
            if ($config == 'server') {
                $this->setServer($this->server);
            } elseif ($config == 'passwordfile') {
                $this->setPasswordfile($value, $this->config['user']);
            }
        }
        return $this;
    }

    /**
     * Set the 'Accept' language.
     *
     * @param string $language Accept Language
     *
     * @return Services_OpenStreetMap_Config
     */
    public function setAcceptLanguage(
        string $language
    ): Services_OpenStreetMap_Config {
        $validator = new Services_OpenStreetMap_Validator_Language();
        $validator->validate($language);
        $this->config['accept-language'] = $language;
        return $this;
    }

    /**
     * Connect to specified server.
     *
     * @param string $server base server details, e.g. https://api.openstreetmap.org
     *
     * @return Services_OpenStreetMap_Config
     * @throws Services_OpenStreetMap_Exception If valid response isn't received.
     */
    public function setServer(string $server): Services_OpenStreetMap_Config
    {
        try {
            $c = $this->getTransport()->getResponse($server . '/api/capabilities');
        } catch (Exception $ex) {
            throw new Services_OpenStreetMap_Exception(
                'Could not get a valid response from server',
                $ex->getCode(),
                $ex
            );
        }
        $this->server = $server;
        $xml = $c->getBody();
        $capabilities = new Services_OpenStreetMap_Helper_Capabilities();
        $capabilities->setApiVersion($this->api_version);

        if (!$capabilities->extract($xml)) {
            throw new Services_OpenStreetMap_Exception(
                'Problem checking server capabilities'
            );
        }
        $details = $capabilities->getDetails();
        $this->config['server'] = $server;
        $this->areaMaximum = $details['areaMaximum'];
        $this->changesetMaximumElements = $details['changesetMaximumElements'];
        $this->databaseStatus = $details['databaseStatus'];
        $this->generator = $details['generator'];
        $this->apiStatus = $details['apiStatus'];
        $this->gpxStatus = $details['gpxStatus'];
        $this->maxVersion = $details['maxVersion'];
        $this->minVersion = $details['minVersion'];
        $this->noteAreaMaximum = $details['noteAreaMaximum'];
        $this->timeout = $details['timeout'];
        $this->tracepointsPerPage = $details['tracepointsPerPage'];
        $this->waynodesMaximum = $details['waynodesMaximum'];

        return $this;
    }

    /**
     * Set and parse a password file, setting username and password as specified
     * in the file.
     *
     * A password file is a ASCII text file, with username and passwords pairs
     * on each line, separated [delimited] by a semicolon.
     * Lines starting with a hash [#] are comments.
     * If only one non-commented line is present in the file, that username and
     * password will be used for authentication.
     * If more than one set of usernames and passwords are present, the
     * username must be specified, and the matching password from the file will
     * be used.
     *
     * <pre>
     * # Example password file.
     * fredfs@example.com:Wilma4evah
     * barney@example.net:B3ttyRawks
     * </pre>
     *
     * @param string $file file containing credentials
     *
     * @return Services_OpenStreetMap_Config
     */
    public function setPasswordfile(string $file, string $user = null): Services_OpenStreetMap_Config
    {
        if ($user === null) {
            $user = $this->config['user'];
        }
        $passwordfile = new Services_OpenStreetMap_Passwordfile($file, $user);
        $this->config['passwordfile'] = $file;
        $this->config['password'] = $passwordfile->getPassword();
        $this->config['user'] = $passwordfile->getUser();
        return $this;
    }

    /**
     * Set the Transport instance.
     *
     * @param Services_OpenStreetMap_Transport $transport Transport instance.
     *
     * @return Services_OpenStreetMap_Config
     */
    public function setTransport(
        Services_OpenStreetMap_Transport $transport
    ): Services_OpenStreetMap_Config {
        $this->transport = $transport;
        return $this;
    }

    /**
     * Retrieve the current Transport instance.
     *
     * @return Services_OpenStreetMap_Transport.
     */
    public function getTransport(): \Services_OpenStreetMap_Transport
    {
        return $this->transport;
    }

    /**
     * Return all config settings in an array.
     *
     * @return array
     */
    public function asArray(): array
    {
        return $this->config;
    }

    /**
     * Set various properties to describe the capabilities that the connected
     * server supports.
     *
     * @param mixed $capabilities XML describing the capabilities of the server
     *
     * @see maxVersion
     * @see minVersion
     * @see timeout
     *
     * @return boolean
     *
     * @internal
     * @throws   Services_OpenStreetMap_Exception If the API Version is not
     *                                            supported.
     */
    private function _checkCapabilities($capabilities): bool
    {
    }

    /**
     * Max size of area that can be downloaded in one request.
     *
     * Use like:
     * <code>
     * $osm = new Services_OpenStreetMap();
     * $area_allowed = $osm->getMaxArea();
     * </code>
     *
     * @return float
     */
    public function getMaxArea(): float
    {
        return $this->areaMaximum;
    }

    /**
     * The maximum area you're allowed to request notes from, in square degrees
     *
     * @link https://github.com/openstreetmap/openstreetmap-website/blob/master/config/settings.yml
     *
     * @return int
     */
    public function getMaxNoteArea(): int
    {
        return $this->noteAreaMaximum;
    }

    /**
     * Minimum API version supported by connected server.
     *
     * Use like:
     * <code>
     * $config = array('user' => 'fred@example.net', 'password' => 'wilma4eva');
     * $osm = new Services_OpenStreetMap($config);
     * $min = $osm->getMinVersion();
     * </code>
     *
     * @return float
     */
    public function getMinVersion():? float
    {
        return $this->minVersion;
    }

    /**
     * Maximum API version supported by connected server.
     *
     * Use like:
     * <code>
     * $config = array('user' => 'fred@example.net', 'password' => 'wilma4eva');
     * $osm = new Services_OpenStreetMap($config);
     * $max = $osm->getMaxVersion();
     * </code>
     *
     * @return float
     */
    public function getMaxVersion(): float
    {
        return $this->maxVersion;
    }

    /**
     * Return the number of seconds that must elapse before a connection is
     * considered to have timed-out.
     *
     * @return int
     */
    public function getTimeout():? int
    {
        return $this->timeout;
    }

    /**
     * Maximum number of tracepoints per page.
     *
     * Use like:
     * <code>
     * $osm = new Services_OpenStreetMap();
     * $tracepoints = $osm->getTracepointsPerPage();
     * </code>
     *
     * @return int
     */
    public function getTracepointsPerPage(): int
    {
        return $this->tracepointsPerPage;
    }

    /**
     * Maximum number of nodes per way.
     *
     * Anymore than that and the way must be split.
     *
     * <code>
     * $osm = new Services_OpenStreetMap();
     * $max = $osm->getMaxNodes();
     * </code>
     *
     * @return int
     */
    public function getMaxNodes(): int
    {
        return $this->waynodesMaximum;
    }

    /**
     * Maximum number of elements allowed per changeset.
     *
     * Use like:
     * <code>
     * $osm = new Services_OpenStreetMap();
     * $max = $osm->getMaxElements();
     * </code>
     *
     * @return int
     */
    public function getMaxElements(): int
    {
        return $this->changesetMaximumElements;
    }

    /**
     * Status of the OSM database (offline/readonly/online).
     *
     * @return null|string
     */
    public function getDatabaseStatus():?string
    {
        return $this->databaseStatus;
    }

    /**
     * Status of the main OSM API (offline/readonly/online).
     *
     * @return null|string
     */
    public function getApiStatus():?string
    {
        return $this->apiStatus;
    }

    /**
     * Status of the OSM GPX API (offline/readonly/online).
     *
     * @return null|string
     */
    public function getGpxStatus():?string
    {
        return $this->gpxStatus;
    }

    /**
     * Name of what generated the Capabilities XML.
     *
     * @return string
     */
    public function getGenerator(): string
    {
        return $this->generator;
    }
}
